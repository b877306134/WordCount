#include"stdafx.h"
#include"Dll1.h"
//#include<time.h>

using namespace std;
/*
pair<int,map<string,int>> countWord(string filename)//统计词频
{
	ifstream infile;
	map<string, int> words;
	map<string, int>::iterator iter;
	infile.open(filename);
	set<string> WordSet;
	string word;
	int wordNum = 0;
	while (infile >> word)
	{
		if (word.size() < 4)
			continue;
		if ((word[0] >= 'a'&&word[0] <= 'z' || word[0] >= 'A'&&word[0] <= 'Z') && \
			(word[1] >= 'a'&&word[1] <= 'z' || word[1] >= 'A'&&word[1] <= 'Z') && \
			(word[2] >= 'a'&&word[2] <= 'z' || word[2] >= 'A'&&word[0] <= 'Z') && \
			(word[3] >= 'a'&&word[3] <= 'z' || word[3] >= 'A'&&word[3] <= 'Z'))
		{
			wordNum++;
			for (unsigned int i = 0; i < word.size(); i++)
				if (word[i] >= 'A'&&word[i] <= 'Z')
					word[i] += 32;
			words[word]++;
		}
	}
	infile.close();
	return pair<int, map<string, int>>(wordNum, words);
}

int number_of_word(string filename)
{
	return countWord(filename).first;
}

int cmp(const pair<string, int>& a, const pair<string, int>& b) noexcept
{
	return a.second > b.second;
}

void wordSort(map<string, int>& words)
{
	ofstream outfile;
	outfile.open("result.txt",ios::app);
	map<string, int>::iterator iter;
	vector<pair<string, int>> tmp;
	for (iter = words.begin(); iter != words.end(); iter++)
		tmp.push_back(pair<string, int>(iter->first, iter->second));
	sort(tmp.begin(), tmp.end(), cmp);
	for (unsigned int i = 0; i < (tmp.size() < 10 ? tmp.size() : 10); i++)
		outfile << "<" << tmp[i].first << ">:" << " " << tmp[i].second << endl;
	outfile.close();
}
void top_10_words(string filename)
{
	map<string, int> tmp = countWord(filename).second;
	wordSort(tmp);
}


pair<int,int> countLine(string filename)//统计行数
{
	int lines = 0, characters = 0;
	ifstream infile;
	infile.open(filename);
	string s;
	while (getline(infile, s))
	{
		if (s.size() == 0)
		{
			characters++;
			continue;
		}
		characters += s.size();
		lines++;
	}
	infile.close();
	return pair<int, int>(lines, characters);
}

int line(string filename)
{
	return countLine(filename).first;
}
int character(string filename)
{
	return countLine(filename).second;
}
*/
int main(int argc, char* argv[])
{
	string filename = "data.txt";
	ofstream outfile;
	outfile.open("result.txt");
	int characters = character(filename);
	int lines = line(filename);
	int words = number_of_word(filename);
	outfile << "characters:" << characters << endl;
	outfile << "lines:" << lines << endl;
	outfile << "words:" << words << endl;
	outfile.close();
	top_10_words(filename);
	/*
	//long start = clock();
	map<string, int> words;
	ifstream infile;
	ofstream outfile;
	countWord(words, "data.txt", infile);
	infile.clear();
	infile.seekg(0, ios::beg);//将指针重新定位到文件头
	countLine(infile);
	infile.close();
	outfile.open("result.txt");
	outfile << "characters:" << characters + lines << endl;
	outfile << "words:" << wordNum << endl;
	outfile << "lines:" << lines << endl;
	wordSort(words, outfile);
	outfile.close();
	//long end = clock();
	//cout << "程序执行结束,共花费秒数:" << ( end - start )/ CLOCKS_PER_SEC << endl;
	*/
	system("pause");
	return 0;
}